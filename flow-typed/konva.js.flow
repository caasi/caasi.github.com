// Library Definitions of Konva.js
// reference: https://github.com/konvajs/konva/blob/master/konva.d.ts

declare module 'konva' {
  declare type HandlerFunc = (
    e: { target: Shape; evt: Event; currentTarget: Node; cancelBubble: boolean  }
  ) => void;

  declare type KonvaNodeEvent
    = 'mouseover'
    | 'mouseout'
    | 'mousemove'
    | 'mouseleave'
    | 'mouseenter'
    | 'mousedown'
    | 'mouseup'
    | 'wheel'
    | 'contextmenu'
    | 'click'
    | 'dblclick'
    | 'touchstart'
    | 'touchmove'
    | 'touchend'
    | 'tap'
    | 'dbltap'
    | 'dragstart'
    | 'dragmove'
    | 'dragend'

  declare type KonvaStageEvent
    = 'contentMouseover'
    | 'contentMousemove'
    | 'contentMouseout'
    | 'contentMousedown'
    | 'contentMouseup'
    | 'contentWheel'
    | 'contentContextmenu'
    | 'contentClick'
    | 'contentDblclick'
    | 'contentTouchstart'
    | 'contentTouchmove'
    | 'contentTouchend'
    | 'contentTap'
    | 'contentDblTap'

  declare type KonvaEvent = KonvaNodeEvent & KonvaStageEvent

  declare type KonvaEventString = KonvaEvent | string

  declare type GlobalCompositeOperationType
    = ''
    | 'source-over'
    | 'source-in'
    | 'source-out'
    | 'source-atop'
    | 'destination-over'
    | 'destination-in'
    | 'destination-out'
    | 'destination-atop'
    | 'lighter'
    | 'copy'
    | 'xor'
    | 'multiply'
    | 'screen'
    | 'overlay'
    | 'darken'
    | 'lighten'
    | 'color-dodge'
    | 'color-burn'
    | 'hard-light'
    | 'soft-light'
    | 'difference'
    | 'exclusion'
    | 'hue'
    | 'saturation'
    | 'color'
    | 'luminosity'

  declare class Filter {}

  declare type KonvaStageEventMap = {
    'contentMouseover': MouseEvent,
    'contentMousemove': MouseEvent,
    'contentMouseout': MouseEvent,
    'contentMousedown': MouseEvent,
    'contentMouseup': MouseEvent,
    'contentWheel': WheelEvent,
    // TODO: implement the PointEvent
    'contentContextmenu': MouseEvent, // PointerEvent,
    'contentClick': MouseEvent,
    'contentDblclick': MouseEvent,
    'contentTouchstart': TouchEvent,
    'contentTouchmove': TouchEvent,
    'contentTouchend': TouchEvent,
    'contentTap': Event,
    'contentDblTap': Event,
  }

  declare type KonvaNodeEventMap = KonvaStageEventMap & {
    'mouseover': MouseEvent,
    'mouseout': MouseEvent,
    'mousemove': MouseEvent,
    'mouseleave': MouseEvent,
    'mouseenter': MouseEvent,
    'mousedown': MouseEvent,
    'mouseup': MouseEvent,
    'wheel': WheelEvent,
    // TODO: implement the PointerEvent
    'contextmenu': MouseEvent, // PointerEvent,
    'click': MouseEvent,
    'dblclick': MouseEvent,
    'touchstart': TouchEvent,
    'touchmove': TouchEvent,
    'touchend': TouchEvent,
    'tap': Event,
    'dbltap': Event,
    'dragstart': DragEvent,
    'dragmove': DragEvent,
    'dragend': DragEvent,
    'dragover': DragEvent,
    'drop': DragEvent,
  }

  declare type NodeConfig = {
    x?: number,
    y?: number,
    width?: number,
    height?: number,
    visible?: boolean,
    listening?: boolean,
    id?: string,
    name?: string,
    opacity?: number,
    scale?: Vector2d,
    scaleX?: number,
    scaleY?: number,
    rotation?: number,
    rotationDeg?: number,
    offset?: Vector2d,
    offsetX?: number,
    offsetY?: number,
    draggable?: boolean,
    dragDistance?: number,
    dragBoundFunc?: (pos: Vector2d) => Vector2d,
    preventDefault?: boolean,
    globalCompositionOperation?: GlobalCompositeOperationType,
  }

  declare type SizeConfig = {
    x?: number,
    y?: number,
    width?: number,
    height?: number,
  }

  declare type ToCanvasConfig = SizeConfig & {
    callback: Function,
  }

  declare type ToDataURLConfig = SizeConfig & {
    mimeType?: string,
    quality?: number,
    pixelRatio?: number,
  }

  declare type ToImageConfig = SizeConfig & {
    callback: Function,
    mimeType?: string,
    quality?: number,
  }

  declare type CacheConfig = SizeConfig & {
    drawBorder?: boolean,
    pixelRatio?: number,
  }

  declare type ClearConfig = SizeConfig

  declare class Transform {
    copy(): Transform;
    getMatrix(): number[];
    getTranslation(): Vector2d;
    invert(): Transform;
    multiply(matrix: number[]): Transform;
    point(point: Vector2d): Vector2d;
    rotate(deg: number): Transform;
    scale(x: number, y: Number): Transform;
    setAbsolutePosition(): Transform;
    skew(x: number, y: Number): Transform;
    translate(x: number, y: Number): Transform;
  }

  declare class Collection {
    [i: number]: any;
    static toCollection(arr: any[]): Collection;
    each(f: (el: Node) => void): void;
    toArray(): any[];
    length: number;
  }

  declare class Node {
    constructor(config: NodeConfig): Node;
    static create<T>(data: any, container?: HTMLElement): T;
    preventDefault(): boolean;
    preventDefault(preventDefault: boolean): this;

    addName(name: string): Node;
    blue(): number;
    blue(blue: number): this;
    brightness(): number;
    brightness(brightness: number): this;
    contrast(): number;
    contrast(contrast: number): this;
    blurRadius(): number;
    blurRadius(radius: number): this;
    cache(config?: CacheConfig): this;
    clearCache(): this;
    clear(bounds?: ClearConfig): this;
    clone(attrs?: NodeConfig): this;
    destroy(): void;

    dragBoundFunc(): (pos: Vector2d) => Vector2d;
    dragBoundFunc(dragBoundFunc: (pos: Vector2d) => Vector2d): this;
    draggable(): boolean;
    draggable(draggable: boolean): this;
    draw(): this;
    embossBlend(): boolean;
    embossBlend(embossBlend: boolean): this;
    embossDirection(): string;
    embossDirection(embossDirection: string): this;
    embossStrength(): number;
    embossStrength(level: number): this;
    embossWhiteLevel(): number;
    embossWhiteLevel(embossWhiteLevel: number): this;
    enhance(): number;
    enhance(enhance: number): this;
    filters(): Filter[];
    filters(filters: Filter): this;
    findAncestor(
      selector?: string,
      includeSelf?: boolean,
      stopNode?: Node
    ): this;
    findAncestors(
      selector?: string,
      includeSelf?: boolean,
      stopNode?: Node
    ): Node[];
    fire(eventType: string, evt?: any, bubble?: boolean): this;
    getAbsoluteOpacity(): number;
    getAbsolutePosition(top?: Container): Vector2d;
    getAbsoluteTransform(top?: Container): Transform;
    getAbsoluteZIndex(): number;
    getAbsoluteScale(): Vector2d;
    getAncestors(): Collection;
    getAttr(attr: string): any;
    getAttrs(): NodeConfig;
    // CHECK
    getCanvas(): Canvas;
    getClassName(): string;
    getClientRect(attrs? : { skipTransform?: boolean, relativeTo?: Object }): SizeConfig;
    getContent(): HTMLDivElement;
    getDepth(): number;
    getHeight(): number;
    getHitCanvas(): Canvas;
    getLayer(): Layer;
    getParent(): Container;
    getPosition(): Vector2d;
    // CHECK
    getSize(): {
      width: number;
      height: number;
    };
    getStage(): Stage;
    getTransform(): Transform;
    getType(): String;
    getWidth(): number;
    getZIndex(): number;
    green(): number;
    green(green: number): this;
    hasName(name: string): boolean;
    height(): number;
    height(height: number): this;
    hide(): void;
    hue(): number;
    hue(hue: number): this;
    id(): string;
    id(id: string): this;
    isDragging(): boolean;
    isListening(): boolean;
    isVisible(): boolean;
    kaleidoscopeAngle(): number;
    kaleidoscopeAngle(kaleidoscopeAngle: number): this;
    kaleidoscopePower(): number;
    kaleidoscopePower(kaleidoscopePower: number): this;
    levels(): number;
    levels(levels: number): this;
    listening(): any;
    listening(listening: boolean): this;
    listening(listening: string): this;
    move(move: Vector2d): this;
    moveDown(): boolean;
    moveTo(newContainer: Container): this;
    moveToBottom(): boolean;
    moveToTop(): boolean;
    moveUp(): boolean;
    name(): string;
    name(name: string): this;
    noise(): number;
    noise(noise: number): this;
    off(evtStr: KonvaEventString): this;
    offset(): Vector2d;
    offset(offset: Vector2d): this;
    offsetX(): number;
    offsetX(offsetX: number): this;
    offsetY(): number;
    offsetY(offsetY: number): this;
    on<K: $Keys<KonvaNodeEventMap>>(
      evtStr: K,
      handler: (e: { target: Shape; evt: $ElementType<KonvaNodeEventMap, K>; currentTarget: Node; cancelBubble: boolean }) => void
    ): this;
    on(evtStr: KonvaEventString, handler: HandlerFunc): this;
    opacity(): number;
    opacity(opacity: number): this;
    pixelSize(): number;
    pixelSize(pixelSize: number): this;
    position(): Vector2d;
    position(position: Vector2d): this;
    red(): number;
    red(red: number): this;
    remove(): this;
    removeName(name: string): this;
    rotate(theta: number): this;
    rotation(): number;
    rotation(rotation: number): this;
    saturation(): number;
    saturation(saturation: number): this;
    scale(): Vector2d;
    scale(scale: Vector2d): this;
    scaleX(): number;
    scaleX(scaleX: number): this;
    scaleY(): number;
    scaleY(scaleY: number): this;
    setAbsolutePosition(pos: Vector2d): this;
    setAttr(attr: string, val: any): this;
    setAttrs(attrs: NodeConfig): void;
    setId(id: string): this;
    setSize(size: { width: number; height: number }): this;
    setZIndex(zIndex: number): void;
    shouldDrawHit(): boolean;
    show(): this;
    skew(): Vector2d;
    skew(skew: Vector2d): this;
    skewX(): number;
    skewX(skewX: number): this;
    skewY(): number;
    skewY(skewY: number): this;
    startDrag(): void;
    stopDrag(): void;
    threshold(): number;
    threshold(threshold: number): this;
    to(params: any): void;
    toCanvas(config: ToCanvasConfig): HTMLCanvasElement;
    toDataURL(config: ToDataURLConfig): string;
    toImage(config: ToImageConfig): HTMLImageElement;
    toJSON(): string;
    toObject(): any;
    transformsEnabled(): string;
    transformsEnabled(transformsEnabled: string): this;
    value(): number;
    value(value: number): this;
    visible(): any;
    visible(visible: boolean): this;
    visible(visible: string): this;
    width(): number;
    width(width: number): this;
    x(): number;
    x(x: number): this;
    y(): number;
    y(y: number): this;
    globalCompositeOperation(): GlobalCompositeOperationType;
    globalCompositeOperation(type: GlobalCompositeOperationType): this;
  }

  declare type ContainerConfig = NodeConfig & {
    clearBeforeDraw?: boolean;
    clipFunc?: (ctx: CanvasRenderingContext2D) => void;
    clipX?: number;
    clipY?: number;
    clipWidth?: number;
    clipHeight?: number;
  }

	declare class Container extends Node {
    constructor(params?: ContainerConfig): Container;
    getChildren(filterfunc?: Function): Collection;
    clip(): SizeConfig;
    clip(clip: SizeConfig | void | null): this;
    clipHeight(): number;
    clipHeight(clipHeight: number | void | null): this;
    clipWidth(): number;
    clipWidth(clipWidth: number | void | null): this;
    clipX(): number;
    clipX(clipX: number | void | null): this;
    clipY(): number;
    clipY(clipY: number | void | null): this;
    clipFunc(): (ctx: CanvasRenderingContext2D) => void;
    clipFunc(ctx: CanvasRenderingContext2D | void | null): void;
    destroyChildren(): void;
    find(selector?: string | ((node: Node) => boolean)): Collection;
    findOne<T: Node>(selector: string | ((node: Node) => boolean)): T;
    getAllIntersections(pos: Vector2d): Shape[];
    hasChildren(): boolean;
    removeChildren(): void;
  }

  declare type LayerConfig = ContainerConfig & {
    clearBeforeDraw?: boolean;
    hitGraphEnabled?: boolean;
  }

  declare class FastLayer extends Container {
    constructor(config?: LayerConfig): FastLayer;
    add(...children: Node[]): this;
    drawScene(): void;
    hitGraphEnabled(val: boolean): this;
    batchDraw(): void;
  }

  declare class Layer extends Container {
    constructor(config?: LayerConfig): Layer;
    add(...children: Node[]): this;
    getIntersection(pos: Vector2d, selector?: string): Shape;
    enableHitGraph(): this;
    disableHitGraph(): this;
    clearBeforeDraw(): boolean;
    clearBeforeDraw(val: boolean): this;
    hitGraphEnabled(): boolean;
    hitGraphEnabled(val: boolean): this;
    batchDraw(): void;
    drawScene(): void;
  }

  declare type StageConfig = ContainerConfig & {
    container: any;
  }

  declare class Stage extends Container {
    constructor(StageConfig: StageConfig): Stage;
    add(...layers: Layer[]): this;
    add(...layers: FastLayer[]): this;
    batchDraw(): void;
    container(): HTMLElement;
    destroy(): void;
    drawHit(): void;
    getIntersection(pos: Vector2d, selector?: string): Shape;
    getLayers(): Layer[];
    getPointerPosition(): Vector2d;
    setContainer(con: HTMLElement): void;
    setHeight(height: number): void;
    setWidth(width: number): void;
  }

  declare type CanvasConfig = {
    width: number,
    height: number,
    pixelRatio: number,
  }

  declare class Canvas {
    constructor(CanvasConfig: CanvasConfig): Canvas;
    getContext(): CanvasRenderingContext2D;
    getHeight(): number;
    getWidth(): number;
    getPixelRatio(): number;
    setHeight(val: number): void;
    setWidth(val: number): void;
    setPixelRatio(val: number): void;
    setSize(size: { width: number; height: number }): void;
    toDataURL(mimeType: string, quality: number): string;
    _canvas: HTMLElement;
  }

  declare class Context {
    clear(bounds?: ClearConfig): Context;
    clearTrace(): void;
    fillShape(shape: Shape): void;
    fillStrokeShape(shape: Shape): void;
    getCanvas(): Canvas;
    getTrace(relaxed: boolean): string;
    reset(): void;
    setAttr(attr: string, value: any): void;
    strokeShape(shape: Shape): void;

    // context pass through methods
    // originally from lib.es6.d.ts
    arc(
      x: number,
      y: number,
      radius: number,
      startAngle: number,
      endAngle: number,
      anticlockwise?: boolean
    ): void;
    beginPath(): void;
    bezierCurveTo(
      cp1x: number,
      cp1y: number,
      cp2x: number,
      cp2y: number,
      x: number,
      y: number
    ): void;
    clearRect(x: number, y: number, width: number, height: number): void;
    clip(): void;
    closePath(): void;
    createImageData(imageDataOrSw: number | ImageData, sh?: number): ImageData;
    createLinearGradient(
      x0: number,
      y0: number,
      x1: number,
      y1: number
    ): CanvasGradient;
    createPattern(
      image: HTMLImageElement | HTMLCanvasElement | HTMLVideoElement,
      repetition: string
    ): CanvasPattern;
    createRadialGradient(
      x0: number,
      y0: number,
      r0: number,
      x1: number,
      y1: number,
      r1: number
    ): CanvasGradient;
    drawImage(
      image:
        | HTMLImageElement
        | HTMLCanvasElement
        | HTMLVideoElement
        | ImageBitmap,
      dstX: number,
      dstY: number
    ): void;
    drawImage(
      image:
        | HTMLImageElement
        | HTMLCanvasElement
        | HTMLVideoElement
        | ImageBitmap,
      dstX: number,
      dstY: number,
      dstW: number,
      dstH: number
    ): void;
    drawImage(
      image:
        | HTMLImageElement
        | HTMLCanvasElement
        | HTMLVideoElement
        | ImageBitmap,
      srcX: number,
      srcY: number,
      srcW: number,
      srcH: number,
      dstX: number,
      dstY: number,
      dstW: number,
      dstH: number
    ): void;
    isPointInPath(x: number, y: number): boolean;
    fill(): void;
    fillRect(x: number, y: number, width: number, height: number): void;
    strokeRect(x: number, y: number, w: number, h: number): void;
    fillText(text: string, x: number, y: number): void;
    measureText(text: string): TextMetrics;
    getImageData(sx: number, sy: number, sw: number, sh: number): ImageData;
    lineTo(x: number, y: number): void;
    moveTo(x: number, y: number): void;
    rect(x: number, y: number, w: number, h: number): void;
    putImageData(imagedata: ImageData, dx: number, dy: number): void;
    quadraticCurveTo(cpx: number, cpy: number, x: number, y: number): void;
    restore(): void;
    rotate(angle: number): void;
    save(): void;
    scale(x: number, y: number): void;
    setLineDash(segments: number[]): void;
    getLineDash(): number[];
    setTransform(
      m11: number,
      m12: number,
      m21: number,
      m22: number,
      dx: number,
      dy: number
    ): void;
    stroke(path?: Path2D): void;
    strokeText(text: string, x: number, y: number): void;
    transform(
      m11: number,
      m12: number,
      m21: number,
      m22: number,
      dx: number,
      dy: number
    ): void;
    translate(x: number, y: number): void;
  }

  declare type ShapeConfig = NodeConfig & {
    fill?: string,
    fillPatternImage?: HTMLImageElement,
    fillPatternX?: number,
    fillPatternY?: number,
    fillPatternOffset?: Vector2d,
    fillPatternOffsetX?: number,
    fillPatternOffsetY?: number,
    fillPatternScale?: Vector2d,
    fillPatternScaleX?: number,
    fillPatternScaleY?: number,
    fillPatternRotation?: number,
    fillPatternRepeat?: string,
    fillLinearGradientStartPoint?: Vector2d,
    fillLinearGradientStartPointX?: number,
    fillLinearGradientStartPointY?: number,
    fillLinearGradientEndPoint?: Vector2d,
    fillLinearGradientEndPointX?: number,
    fillLinearGradientEndPointY?: number,
    fillLinearGradientColorStops?: Array<number | string>,
    fillRadialGradientStartPoint?: Vector2d,
    fillRadialGradientStartPointX?: number,
    fillRadialGradientStartPointY?: number,
    fillRadialGradientEndPoint?: Vector2d,
    fillRadialGradientEndPointX?: number,
    fillRadialGradientEndPointY?: number,
    fillRadialGradientStartRadius?: number,
    fillRadialGradientEndRadius?: number,
    fillRadialGradientColorStops?: Array<number | string>,
    fillEnabled?: boolean,
    fillPriority?: string,
    stroke?: string,
    strokeWidth?: number,
    strokeScaleEnabled?: boolean,
    strokeHitEnabled?: boolean,
    strokeEnabled?: boolean,
    lineJoin?: string,
    lineCap?: string,
    sceneFunc?: (con: Context) => void,
    hitFunc?: (con: Context) => void,
    shadowColor?: string,
    shadowBlur?: number,
    shadowOffset?: Vector2d,
    shadowOffsetX?: number,
    shadowOffsetY?: number,
    shadowOpacity?: number,
    shadowEnabled?: boolean,
    shadowForStrokeEnabled?: boolean,
    dash?: number[],
    dashEnabled?: boolean,
    perfectDrawEnabled?: boolean,
  }

  declare class Shape extends Node {
    constructor(ShapeConfig: ShapeConfig): Shape;
    dash(): number[];
    dash(dash: number[]): this;
    dashEnabled(): boolean;
    dashEnabled(dashEnabled: boolean): this;
    drawHit(canvas?: Canvas, top?: Container, caching?: boolean): this;
    drawHitFromCache(alphaThreshold: number): this;
    fill(): string;
    fill(fill: string): this;
    fillEnabled(): boolean;
    fillEnabled(fillEnabled: boolean): this;
    fillLinearGradientColorStops(): Array<number | string>;
    fillLinearGradientColorStops(colors: Array<number | string>): this;
    fillLinearGradientStartPoint(): Vector2d;
    fillLinearGradientStartPoint(point: Vector2d): Vector2d;
    fillLinearGradientStartPointX(): number;
    fillLinearGradientStartPointX(x: number): this;
    fillLinearGradientStartPointY(): number;
    fillLinearGradientStartPointY(y: number): this;
    fillLinearGradientEndPoint(): Vector2d;
    fillLinearGradientEndPoint(point: Vector2d): this;
    fillLinearGradientEndPointX(): number;
    fillLinearGradientEndPointX(x: number): this;
    fillLinearGradientEndPointY(): number;
    fillLinearGradientEndPointY(y: number): this;
    fillLinearRadialStartPoint(): Vector2d;
    fillLinearRadialStartPoint(point: Vector2d): this;
    fillLinearRadialStartPointX(): number;
    fillLinearRadialStartPointX(x: number): this;
    fillLinearRadialStartPointY(): number;
    fillLinearRadialStartPointY(y: number): this;
    fillLinearRadialEndPoint(): Vector2d;
    fillLinearRadialEndPoint(point: Vector2d): Vector2d;
    fillLinearRadialEndPointX(): number;
    fillLinearRadialEndPointX(x: number): this;
    fillLinearRadialEndPointY(): number;
    fillLinearRadialEndPointY(y: number): this;
    fillPatternImage(): HTMLImageElement;
    fillPatternImage(image: HTMLImageElement): this;
    fillRadialGradientStartRadius(): number;
    fillRadialGradientStartRadius(radius: number): this;
    fillRadialGradientEndRadius(): number;
    fillRadialGradientEndRadius(radius: number): this;
    fillRadialGradientColorStops(): Array<number | string>;
    fillRadialGradientColorStops(color: Array<number | string>): this;
    fillPatternOffset(): Vector2d;
    fillPatternOffset(offset: Vector2d): this;
    fillPatternOffsetX(): number;
    fillPatternOffsetX(x: number): this;
    fillPatternOffsetY(): number;
    fillPatternOffsetY(y: number): this;
    fillPatternRepeat(): string;
    fillPatternRepeat(repeat: string): this;
    fillPatternRotation(): number;
    fillPatternRotation(rotation: number): this;
    fillPatternScale(): Vector2d;
    fillPatternScale(scale: Vector2d): this;
    fillPatternScaleX(): number;
    fillPatternScaleX(x: number): this;
    fillPatternScaleY(): number;
    fillPatternScaleY(y: number): this;
    fillPatternX(): number;
    fillPatternX(x: number): number;
    fillPatternY(): number;
    fillPatternY(y: number): this;
    fillPriority(): string;
    fillPriority(priority: string): this;
    getSelfRect(): SizeConfig;
    hasFill(): boolean;
    hasShadow(): boolean;
    hasStroke(): boolean;
    hitFunc(): Function;
    hitFunc(func: Function): this;
    intersects(point: Vector2d): boolean;
    lineCap(): string;
    lineCap(lineCap: string): this;
    lineJoin(): string;
    lineJoin(lineJoin: string): this;
    perfectDrawEnabled(): boolean;
    perfectDrawEnabled(perfectDrawEnabled: boolean): this;
    sceneFunc(): Function;
    sceneFunc(func: (con: Context) => {}): this;
    shadowColor(): string;
    shadowColor(shadowColor: string): this;
    shadowEnabled(): boolean;
    shadowEnabled(shadowEnabled: boolean): this;
    shadowForStrokeEnabled(): boolean;
    shadowForStrokeEnabled(shadowForStrokeEnabled: boolean): this;
    shadowOffset(): Vector2d;
    shadowOffset(shadowOffset: Vector2d): this;
    shadowOffsetX(): number;
    shadowOffsetX(shadowOffsetX: number): this;
    shadowOffsetY(): number;
    shadowOffsetY(shadowOffsetY: number): this;
    shadowOpacity(): number;
    shadowOpacity(shadowOpacity: number): this;
    shadowBlur(): number;
    shadowBlur(blur: number): this;
    stroke(): string;
    stroke(stroke: string): this;
    strokeEnabled(): boolean;
    strokeEnabled(strokeEnabled: boolean): this;
    strokeScaleEnabled(): boolean;
    strokeScaleEnabled(strokeScaleEnabled: boolean): this;
    strokeHitEnabled(): boolean;
    strokeHitEnabled(strokeHitEnabled: boolean): this;
    strokeWidth(): number;
    strokeWidth(strokeWidth: number): this;
  }

  declare type TextConfig = ShapeConfig & {
    text: string,
    fontFamily?: string,
    fontSize?: number,
    fontStyle?: string,
    align?: string,
    padding?: number,
    lineHeight?: number,
    wrap?: string,
    ellipsis?: boolean,
  }

  declare class Text extends Shape {
    constructor(TextConfig: TextConfig): Text;
    getTextWidth(): number;
    getTextHeight(): number;
    text(): string;
    text(text: string): this;
    fontFamily(): string;
    fontFamily(fontFamily: string): this;
    fontSize(): number;
    fontSize(fontSize: number): this;
    fontStyle(): string;
    fontStyle(fontStyle: string): this;
    fontVariant(): string;
    fontVariant(fontVariant: string): this;
    align(): string;
    align(align: string): this;
    padding(): number;
    padding(padding: number): this;
    lineHeight(): number;
    lineHeight(lineHeight: number): this;
    wrap(): string;
    wrap(wrap: string): this;
    textDecoration(): string;
    textDecoration(textDecoration: string): this;
  }

  declare type Vector2d = {
    x: number,
    y: number,
  }
}
